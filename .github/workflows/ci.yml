name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ['3.11', '3.12']  # Focus on recent versions
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Verify dependencies
      run: |
        echo "‚úÖ Using Python built-in modules only"
        python -c "import json, argparse, pathlib, shutil, os, sys; print('All modules available')"
        
    - name: Run syntax check
      run: |
        python -m py_compile capability_statement_expander.py
        python -m py_compile test_expander.py
        echo "‚úÖ Syntax check passed"
        
    - name: Run unit tests
      run: |
        python test_expander.py
        
    - name: Test with example data
      run: |
        mkdir -p test_output
        echo "üîç Testing script execution..."
        python capability_statement_expander.py ./examples ./test_output "http://example.org/CapabilityStatement/example-base-capability" --verbose
        
    - name: Debug output directory
      run: |
        echo "üìÅ Checking test_output directory..."
        ls -la test_output/ || echo "Directory does not exist"
        echo "üìÅ All JSON files in test_output:"
        find test_output -name "*.json" -type f || echo "No JSON files found"
        echo "üìÅ Directory tree:"
        tree test_output/ || find test_output -type f || echo "No files found"
        
    - name: Verify output files
      run: |
        echo "üîç Looking for expanded CapabilityStatement..."
        
        # List all files in output directory
        if [ -d "./test_output" ]; then
          echo "Files in test_output:"
          ls -la ./test_output/
          
          # Look for the correct expanded CapabilityStatement filename
          EXPECTED_FILE="./test_output/CapabilityStatement-example-base-capability-expanded.json"
          if [ -f "$EXPECTED_FILE" ]; then
            echo "‚úÖ Found expanded CapabilityStatement: $(basename $EXPECTED_FILE)"
          else
            echo "‚ùå Expected file not found: $(basename $EXPECTED_FILE)"
            echo "Looking for any CapabilityStatement files:"
            find ./test_output -name "*CapabilityStatement*" -type f || echo "None found"
          fi
          
          # Count all JSON files
          FILE_COUNT=$(find ./test_output -name "*.json" -type f | wc -l)
          echo "üìä Total JSON files: $FILE_COUNT"
          
          if [ $FILE_COUNT -gt 0 ]; then
            echo "‚úÖ Script executed and created $FILE_COUNT files"
          else
            echo "‚ùå No files created - script may have failed"
            exit 1
          fi
        else
          echo "‚ùå Output directory not created"
          exit 1
        fi
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-output-python-${{ matrix.python-version }}
        path: ./test_output/
        retention-days: 7

  action-test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test GitHub Action
      uses: ./
      with:
        input_directory: './examples'
        output_directory: './action-test-output'
        capability_statement_url: 'http://example.org/CapabilityStatement/example-base-capability'
        verbose: 'true'
        
    - name: Verify Action Output
      run: |
        echo "üìÅ Action output directory contents:"
        ls -la ./action-test-output/ || echo "No output directory"
        
        # Count files if directory exists
        if [ -d "./action-test-output" ]; then
          FILE_COUNT=$(find ./action-test-output -name "*.json" 2>/dev/null | wc -l)
          echo "‚úÖ Action generated $FILE_COUNT files"
          
          if [ $FILE_COUNT -gt 0 ]; then
            echo "üéâ GitHub Action test passed!"
          else
            echo "‚ö†Ô∏è No JSON files generated"
          fi
        else
          echo "‚ö†Ô∏è Output directory not created"
        fi
        
    - name: Upload action test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: action-test-output
        path: ./action-test-output/
        retention-days: 3

  quick-lint:
    runs-on: ubuntu-latest 
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Basic syntax check
      run: |
        python -m py_compile capability_statement_expander.py
        python -m py_compile test_expander.py
        echo "‚úÖ Syntax check passed"