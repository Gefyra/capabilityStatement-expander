name: 'FHIR CapabilityStatement Expander'
description: 'Expands FHIR CapabilityStatements by recursively resolving imports and extracts all referenced resources'
author: 'Patrick Werner'

branding:
  icon: 'layers'
  color: 'blue'

inputs:
  input_directory:
    description: 'Path to input directory with FHIR JSON files'
    required: true
    default: './input'
  output_directory:
    description: 'Path to output directory for expanded resources'
    required: true
    default: './output'
  capability_statement_url:
    description: 'Canonical URL of the CapabilityStatement to expand'
    required: true
  verbose:
    description: 'Enable verbose logging'
    required: false
    default: 'false'
  python_version:
    description: 'Python version for execution'
    required: false
    default: '3.11'

outputs:
  expanded_files_count:
    description: 'Number of created expanded files'
    value: ${{ steps.expand.outputs.files_count }}
  output_directory:
    description: 'Path to output directory with expanded resources'
    value: ${{ inputs.output_directory }}
  expanded_capability_statement:
    description: 'Filename of the expanded CapabilityStatement'
    value: ${{ steps.expand.outputs.expanded_file }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}
               
    - name: Validate Input Directory
      shell: bash
      run: |
        if [ ! -d "${{ inputs.input_directory }}" ]; then
          echo "❌ Input directory not found: ${{ inputs.input_directory }}"
          exit 1
        fi
        
        json_files=$(find "${{ inputs.input_directory }}" -name "*.json" | wc -l)
        echo "✅ Input directory found with $json_files JSON files"
        
        if [ "$json_files" -eq 0 ]; then
          echo "⚠️  Warning: No JSON files found in input directory"
        fi
        
    - name: Create Output Directory
      shell: bash
      run: |
        mkdir -p "${{ inputs.output_directory }}"
        echo "📁 Output directory created: ${{ inputs.output_directory }}"
        
    - name: Run FHIR CapabilityStatement Expander
      id: expand
      shell: bash
      run: |
        echo "🚀 Starting FHIR CapabilityStatement Expander..."
        
        # Determine verbose flag - auto-enable when GitHub Actions debug logging is active
        VERBOSE_FLAG=""
        if [ "${{ inputs.verbose }}" = "true" ] || [ "$ACTIONS_STEP_DEBUG" = "true" ]; then
          VERBOSE_FLAG="--verbose"
          if [ "$ACTIONS_STEP_DEBUG" = "true" ]; then
            echo "🔍 Auto-enabled verbose logging (GitHub Actions debug mode detected)"
          fi
        fi
        
        # Run the expander
        # Use the environment variable for container compatibility
        SCRIPT_PATH="$GITHUB_ACTION_PATH/capability_statement_expander.py"
        
        if [ -f "$SCRIPT_PATH" ]; then
          echo "✅ Script found, executing..."
          
          # Capture output to extract copied files count
          EXPANDER_OUTPUT=$(python "$SCRIPT_PATH" \
            "${{ inputs.input_directory }}" \
            "${{ inputs.output_directory }}" \
            "${{ inputs.capability_statement_url }}" \
            ${{ inputs.verbose == 'true' && '--verbose' || '' }} 2>&1)
          
          echo "$EXPANDER_OUTPUT"
          
          # Extract number of copied files from log output
          copied_files=$(echo "$EXPANDER_OUTPUT" | grep -o '[0-9]\+ Dateien kopiert' | grep -o '[0-9]\+' || echo "0")
          files_count=$copied_files
          
          echo "files_count=$files_count" >> $GITHUB_OUTPUT
          
          # Find expanded CapabilityStatement file
          expanded_file=$(find "${{ inputs.output_directory }}" -name "*expanded.json" | head -1 | xargs basename 2>/dev/null || echo "")
          echo "expanded_file=$expanded_file" >> $GITHUB_OUTPUT
          
          echo "✅ Capability Statement successfully expanded to ${{ inputs.output_directory }}"
          echo "✅ Successfully processed $files_count files"
        else
          echo "❌ Script not found at expected location: $SCRIPT_PATH"
          echo "Action path: ${{ github.action_path }}"
          echo "Environment path: $GITHUB_ACTION_PATH"
          exit 1
        fi
        
    - name: List Generated Files
      shell: bash
      run: |
        echo "📄 Processed FHIR Resources:"
        echo "================================"
        
        total_files=0
        expanded_files=0
        copied_files=0
        
        # First, show expanded CapabilityStatement(s)
        echo "🔧 Expanded Resources:"
        for file in "${{ inputs.output_directory }}"/*expanded*.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
            echo "  📋 $filename (${size} bytes)"
            total_files=$((total_files + 1))
            expanded_files=$((expanded_files + 1))
          fi
        done
        
        if [ $expanded_files -eq 0 ]; then
          echo "  (No expanded resources found)"
        fi
        
        echo ""
        echo "� Copied Resources:"
        
        # Then show all other files (copied)
        for file in "${{ inputs.output_directory }}"/*.json; do
          if [ -f "$file" ] && [[ ! "$file" == *"expanded"* ]]; then
            filename=$(basename "$file")
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
            
            # Try to determine resource type from filename or content
            resource_type="Unknown"
            if [[ "$filename" == *"CapabilityStatement"* ]]; then
              resource_type="CapabilityStatement"
            elif [[ "$filename" == *"StructureDefinition"* ]]; then
              resource_type="StructureDefinition"
            elif [[ "$filename" == *"ValueSet"* ]]; then
              resource_type="ValueSet"
            elif [[ "$filename" == *"CodeSystem"* ]]; then
              resource_type="CodeSystem"
            elif [[ "$filename" == *"SearchParameter"* ]]; then
              resource_type="SearchParameter"
            elif [[ "$filename" == *"ImplementationGuide"* ]]; then
              resource_type="ImplementationGuide"
            elif [[ "$filename" == *"Subscription"* ]]; then
              resource_type="Subscription"
            else
              # Try to extract from JSON content
              resource_type=$(grep -o '"resourceType"[[:space:]]*:[[:space:]]*"[^"]*"' "$file" 2>/dev/null | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
              if [ -z "$resource_type" ]; then
                resource_type="Unknown"
              fi
            fi
            
            echo "  📋 $filename [$resource_type] (${size} bytes)"
            total_files=$((total_files + 1))
            copied_files=$((copied_files + 1))
          fi
        done
        
        if [ $copied_files -eq 0 ]; then
          echo "  (No copied resources found)"
        fi
        
        echo ""
        echo "================================"
        echo "📊 Summary:"
        echo "  🔧 Expanded: $expanded_files files"
        echo "  📁 Copied: $copied_files files"
        echo "  📋 Total: $total_files files processed"